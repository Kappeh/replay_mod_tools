use std::path::PathBuf;

use clap::Parser;

/// A command-line tool designed to transform the output of Minecraft's Replay Mod by unpacking depth map images.
///
/// Replay Mod generates depth information encoded as a 32 bit floating-point depth value split across the 4 channels (Alpha, Red, Green, Blue) of each pixel.
/// This tool extracts the depth information from each frame in the PNG sequence and renders a new grayscale sequence based on the depth values.
/// The grayscale images represent the relative depth of each pixel, with the depth value being mapped to a grayscale intensity based on user-specified near and far plane parameters.
#[derive(clap::Parser)]
#[clap(version, about, long_about = None)]
struct Cli {
    /// The path of the directory containing the depth map sequence generated by replay mod
    #[arg(short = 's', long = "source_dir", env = "SOURCE_DIR", default_value = ".")]
    source_dir: PathBuf,

    /// The suffix of the depth map sequence files
    #[arg(long = "source_suffix", env = "SOURCE_SUFFIX", default_value = ".depth.png")]
    source_suffix: String,

    /// The path of the directory to save the unpacked depth map sequence, defaults to the source directory
    #[arg(short = 'd', long = "dest_dir", env = "DEST_DIR")]
    dest_dir: Option<PathBuf>,

    /// The suffix for the unpacked depth map sequence files
    #[arg(long = "dest_suffix", env = "DEST_SUFFIX", default_value = ".unpacked.png")]
    dest_suffix: String,

    /// The near plane distance, pixels with this depth value are rendered white
    #[arg(short = 'n', long = "near", env = "NEAR", default_value_t = 0.0)]
    near: f32,

    /// The far plane distance, pixels with this depth value are rendered black
    #[arg(short = 'f', long = "far", env = "FAR", default_value_t = 50.0)]
    far: f32,

    /// The number of workers (threads) to spawn, defaults to number of cpu cores
    #[arg(short = 'w', long = "num_workers", env = "NUM_WORKERS")]
    num_workers: Option<usize>,
}

#[derive(Clone)]
pub struct Config {
    /// The path of the directory containing the depth map sequence generated by replay mod
    pub source_dir: PathBuf,

    /// The suffix of the depth map sequence files
    pub source_suffix: String,

    /// The path of the directory to save the unpacked depth map sequence, defaults to the source directory
    pub dest_dir: PathBuf,

    /// The suffix for the unpacked depth map sequence files
    pub dest_suffix: String,

    /// The near plane distance
    pub near: f32,

    /// The far plane distance
    pub far: f32,

    /// The maximum number of workers (threads) to spawn, defaults to number of cpu cores
    pub num_workers: usize,
}

impl Config {
    pub fn parse() -> Self {
        Cli::parse().into()
    }

    pub fn validate(&self) -> anyhow::Result<()> {
        if (self.near - self.far).abs() < f32::EPSILON {
            return Err(anyhow::anyhow!("near and far are too close together, pick different values"));
        }

        Ok(())
    }

    pub fn parse_and_validate() -> anyhow::Result<Self> {
        let config = Self::parse();
        config.validate()?;
        Ok(config)
    }
}

impl From<Cli> for Config {
    fn from(value: Cli) -> Self {
        Self {
            source_dir: value.source_dir.clone(),
            source_suffix: value.source_suffix,
            dest_dir: value.dest_dir.unwrap_or(value.source_dir),
            dest_suffix: value.dest_suffix,
            near: value.near,
            far: value.far,
            num_workers: value.num_workers.unwrap_or(num_cpus::get()),
        }
    }
}
